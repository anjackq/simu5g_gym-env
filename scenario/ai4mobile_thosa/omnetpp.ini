# Example simulation for integrating veins (http://veins.car2x.org/) with Simu5G
# 
# Requirements:
#       You need to enable the feature "Simu5G Cars" for this simulation
#       (Project->Properties->OMNeT++->Project Features)
#
#       You need to import the "veins" project and its subproject
#       "veins_inet" in your workspace.
[General]
result-dir = results
cmdenv-express-mode = true
cmdenv-autoflush = true
**.cmdenv-log-level = info

ned-path = .
image-path = ../../images

network = ThosaHighwayScenario

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = true

sim-time-limit = 200s
warmup-period = 20s

#**.sctp.**.scalar-recording = true
#**.sctp.**.vector-recording = true
#**.veinsManager.**.vector-recording = true
**.routingRecorder.enabled = true
**.vector-recording = true


# Set the simulation playgroud size
*.playgroundSizeX = 6000m
*.playgroundSizeY = 50m
*.playgroundSizeZ = 50m

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
#            VeinsManager parameters                     #
##########################################################
#*.veinsManager.host = "localhost"       # if traci-launchd runs on localhost
#*.veinsManager.moduleType = "simu5g.nodes.cars.NRCar"
#*.veinsManager.moduleName = "car"
#*.veinsManager.launchConfig = xmldoc("thosa_highway.launchd.xml")
#*.veinsManager.updateInterval = 0.1s

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
#*.manager.port = -1
*.manager.autoShutdown = true
*.manager.configFile = "thosa_highway.sumocfg"
# replace the sumo with the absolute path to sumo excutable if not working
#*.manager.command = "sumo"
*.manager.command = "/home/anjie/Desktop/sumo-1.15.0/bin/sumo"
*.manager.moduleType = "thosa_highway.NRCarGym"




##########################################################
#                      Mobility                          #
##########################################################
#*.car[*].mobility.typename = "VeinsInetMobility"

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].veinsmobility.x = 0
*.node[*].veinsmobility.y = 0
*.node[*].veinsmobility.z = 0
*.node[*].veinsmobility.setHostSpeed = false
*.node[*0].veinsmobility.accidentCount = 0


##########################################################
#          Mobile network specific parameters            #
##########################################################

# Number of Resource Blocks
**.numBands = 25 

# Transmission Power
**.ueTxPower = 26
**.eNodeBTxPower = 46

# Enable dynamic association of UEs (based on best SINR)
*.node[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.node[*].masterId = 0     # ignored if dynamic association is disabled
*.node[*].macCellId = 0    # ignored if dynamic association is disabled
*.node[*].nrMasterId = 1     # ignored if dynamic association is disabled
*.node[*].nrMacCellId = 1    # ignored if dynamic association is disabled

# eNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2 


# Enable handover
*.node[*].cellularNic.nrPhy.enableHandover = true
*.gNodeB*.cellularNic.phy.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second

# X2 and SCTP configuration
*.gNodeB*.numX2Apps = 1    # one x2App per peering eNodeB
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0" 
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0" 
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false


##########################################################
#                   GymConnection                        #
##########################################################
*.gym_connection.action_space = "gym.spaces.Discrete(8)"
*.gym_connection.observation_space = "gym.spaces.Box(low=np.array([-np.inf, -np.inf, -1, -1], dtype=np.float32), high=np.array([np.inf, np.inf, 1, 1], dtype=np.float32))"


# ----------------------------------------------------------------------------- #
# Config "VoIP-Uplink"
#
[Config VoIP-UL]

##########################################################
#                    App Layer                           #
##########################################################

# Results recording
**.sctp.**.scalar-recording = true
**.sctp.**.vector-recording = true

**.LastPosX.result-recording-modes = default,+vector
**.LastPosY.result-recording-modes = default,+vector
**.LastVelocity.result-recording-modes = default,+vector
**.LastOrientation.result-recording-modes = default,+vector

*.gNodeB*.*.mobility.LastPosX.result-recording-modes = default, +vector
*.gNodeB*.*.mobility.LastPosY.result-recording-modes = default, +vector

*.server.app[*].result-recording-modes = default,+vector
*.node[*].app[0].result-recording-modes = default,+vector

output-vector-file = "${resultdir}/${configname}.vec"
output-scalar-file = "${resultdir}/${configname}.sca"


*.server.numApps = 10
*.server.app[*].typename = "VoIPReceiver"
*.server.app[*].localPort = 3000 + ancestorIndex(0) 

*.node[*].numApps = 1
*.node[*].app[0].typename = "VoIPSender"
*.node[*].app[0].destAddress = "server"
*.node[*].app[0].destPort = 3000 + ancestorIndex(1)


# ----------------------------------------------------------------------------- #
# Config "VoIP-Downlink"
#
[Config VoIP-DL]

##########################################################
#                    App Layer                           #
##########################################################

# Results recording
**.sctp.**.scalar-recording = true
**.sctp.**.vector-recording = true
**.veinsManager.**.vector-recording = true
**.veinsManager.**.scalar-recording = true

*.server.numApps = 10
*.server.app[*].typename = "VoIPSender"
*.server.app[*].localPort = 3000 + ancestorIndex(0) 
*.server.app[*].destAddress = "car[" + string(ancestorIndex(0)) + "]"
*.server.app[*].startTime = 0.05s


*.car[*].numApps = 1
*.car[*].app[0].typename = "VoIPReceiver"



# ----------------------------------------------------------------------------- #
# Config "VoIP-D2D"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the D2D link, if they are under the same cell
#
[Config VoIP-D2D]

**.amcMode = "D2D"

# D2D-capable flows are started in D2D mode
*.car[*].cellularNic.d2dInitialMode = true

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.gNodeB.cellularNic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.gNodeB*.cellularNic.nrPhy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false

# each vehicle transmits using D2D to the following one 
*.car[*].numApps = 1
*.car[0].app[0].typename = "VoIPSender"
*.car[0].app[0].destAddress = "car[1]"
*.car[1].app[0].typename = "VoIPReceiver"

*.car[2].app[0].typename = "VoIPSender"
*.car[2].app[0].destAddress = "car[3]"
*.car[3].app[0].typename = "VoIPReceiver"

*.car[4].app[0].typename = "VoIPSender"
*.car[4].app[0].destAddress = "car[5]"
*.car[5].app[0].typename = "VoIPReceiver"

*.car[6].app[0].typename = "VoIPSender"
*.car[6].app[0].destAddress = "car[7]"
*.car[7].app[0].typename = "VoIPReceiver"


# ----------------------------------------------------------------------------- #
# Config "D2DMulticast"
#
# In this configuration, vehicles form two groups (vehicles on the same lane are in the same group).
# For each group, the leader vehicle transmits periodic alert messages to following vehicles
#
[Config D2DMulticast]

### Enable D2D for the eNodeB and the UEs involved in direct communications ###
**.amcMode = "D2D"

### Select CQI for D2D transmissions ###
# One-to-Many communications work with fixed CQI values only.
# Set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
**.enableD2DCqiReporting = false
**.usePreconfiguredTxParams = true
**.d2dCqi = ${cqi=7}

### Traffic configuration ###
*.car[*].numApps = 1

# --- 1st group: 0 < 1 < 2 < 3 -- #
*.car[0..4].ipv4.configurator.mcastGroups = "224.0.0.10"
# transmitter
*.car[0].app[*].typename = "AlertSender"
*.car[0].app[*].localPort = 3088+ancestorIndex(0) 
*.car[0].app[*].startTime = uniform(0s,0.02s)
*.car[0].app[*].destAddress = "224.0.0.10"          # IP address of the multicast group 
*.car[0].app[*].destPort = 1000
# receivers
*.car[1..3].app[*].typename = "AlertReceiver"
*.car[1..3].app[*].localPort = 1000

# --- 2nd group: 4 < 5 < 6 < 7 -- #
*.car[4..7].ipv4.configurator.mcastGroups = "224.0.0.11"
# transmitter
*.car[4].app[*].typename = "AlertSender"
*.car[4].app[*].localPort = 3088+ancestorIndex(0) 
*.car[4].app[*].startTime = uniform(0s,0.02s)
*.car[4].app[*].destAddress = "224.0.0.11"          # IP address of the multicast group 
*.car[4].app[*].destPort = 1000
# receivers (they must belong to the above multicast group)
*.car[5..7].app[*].typename = "AlertReceiver"
*.car[5..7].app[*].localPort = 1000


